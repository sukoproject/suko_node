var http = require('http');

var server = http.createServer(function(req, res) {
    res.writeHead(200, {"Content-Type": "text/html"});
    res.end('<p>Voici un paragraphe <strong>HTML</strong> !</p>');
});
server.listen(8080);

/*

import java.text.Normalizer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.jsoup.helper.StringUtil;

import com.suko.DAO.business.Word;
import com.suko.DAO.dataBase.WordGraphDB;

public class TextAnalyzer {

    //private static final Logger logger = LogManager.getLogger(TextAnalyzer.class);

    private static List<String> getWordFormToExclude(String language) {
        List < String > listWordForm = new ArrayList<String>();
        switch (language) {
            case ("FR"): 
                listWordForm.add("Article défini");
                listWordForm.add("Symbole");
                listWordForm.add("Préposition");
                listWordForm.add("Adverbe");
                listWordForm.add("Verbe");
                listWordForm.add("Adjectif numéral");
                listWordForm.add("Forme de verbe");
                listWordForm.add("Forme d’adjectif");
                listWordForm.add("Pronom personnel");
                listWordForm.add("Préposition");
                listWordForm.add("Adverbe");
                listWordForm.add("Verbe");
                listWordForm.add("Conjonction de coordination");
                listWordForm.add("Article partitif");
                listWordForm.add("Forme d’adjectif indéfini");
                listWordForm.add("Conjonction");
                listWordForm.add("Adjectif");
                listWordForm.add("Adjectif possessif");
                listWordForm.add("Adjectif indéfini");
                listWordForm.add("Adjectif démonstratif");
                listWordForm.add("Forme d’adjectif démonstratif");
                listWordForm.add("Forme d’adjectif possessif");
                listWordForm.add("Adverbe interrogatif");
                break;
            case ("EN"):
                listWordForm.add("Verb");
                listWordForm.add("Preposition");
                listWordForm.add("Article");
                listWordForm.add("Pronoun");
                listWordForm.add("Adjective");
                listWordForm.add("Conjunction");
                listWordForm.add("Particle");
                listWordForm.add("Determiner");
                listWordForm.add("Letter");
                listWordForm.add("Numeral");
                listWordForm.add("Adverb");
                break;
        }
        return listWordForm;
    }

    public static List<String> getKeysWords(String textToAnalyse, String language) {

        textToAnalyse = Normalizer.normalize(textToAnalyse, Normalizer.Form.NFD);
        textToAnalyse = textToAnalyse.replaceAll("[\\p{InCombiningDiacriticalMarks}]", "");
        String[] wordsToAnalyse = textToAnalyse.replaceAll("[^a-zA-Z ]", " ").toLowerCase().split("\\s+");
        List < String > languages = new ArrayList<String>(
            Arrays.asList("EN", "FR"));
        int defaultlanguage = languages.indexOf(language);
        return listSkill(wordsToAnalyse, languages, defaultlanguage);
    }

    private static List<String> listSkill(String[] wordsToAnalyse, List<String> languages, int defaultlanguage) {
    List < String > listSkill = new ArrayList<String>();
    int nbWordUnknownInThislanguage = 0;
    if (defaultlanguage < 0) defaultlanguage = 0;
    List < String > listWordForm = getWordFormToExclude(languages.get(defaultlanguage));
    for (String wordToAnalyse : wordsToAnalyse) {
        if (!StringUtil.isBlank(wordToAnalyse)) {
            Word w = analyseWord(wordToAnalyse, languages.get(defaultlanguage));
            if (!listWordForm.contains(w.getWordform())) {
                if (w.getWordform().equals(Word.ALL_WORD_FROM.UNKNOWN.toString())) {
                    nbWordUnknownInThislanguage++;
                }
                listSkill.add(w.getValue());
            }
        }
        if (languages.size() > 1 && wordsToAnalyse.length > 1 && nbWordUnknownInThislanguage > wordsToAnalyse.length / 2) {
            languages.remove(defaultlanguage);
            return listSkill(wordsToAnalyse, languages, 0);
        }
    }
    return listSkill;
}

	public static Word analyseWord(String wordToAnalyse, String language){
    WordGraphDB wordGraphDB = new WordGraphDB();
    Word word = new Word(wordToAnalyse, language);
    word = wordGraphDB.searchWordGraphDataBase(word);
    if (word.getWordform() != null && !word.getWordform().isEmpty()) {
        return word;
    }
    word = wikiConnector.getWordFormFromWiki(wordToAnalyse, language);
    wordGraphDB.mergeWordGraphDatabase(word);
    return word;
}	
}
//////////::::

wiki


package com.suko.service.analyzer;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.select.Elements;

import com.suko.DAO.business.Word;
import com.suko.service.Admin;
import com.suko.service.normaliser.HtmlParsing;

public class wikiConnector {

    static String linkWikiEN = Admin.getParam("Analyser", "Wiki", "EN_url", "wiki url to use to get the wordform in english", "https://en.wiktionary.org/wiki/").getValue();
    static String linkWikiFR = Admin.getParam("Analyser", "Wiki", "FR_url", "wiki url to use to get the wordform in french", "https://fr.wiktionary.org/wiki/").getValue();
    static String docSelectedFR = Admin.getParam("Analyser", "Wiki", "FR_CSS_Document_Selector", "CSS doc to select in the Wiki fr", ".titredef").getValue();
    private static final Logger logger = LogManager.getLogger(wikiConnector.class);

    public static Word getWordFormFromWiki(String wordToAnalyse, String language) {
        Word word = new Word(wordToAnalyse, Word.ALL_WORD_FROM.UNKNOWN.toString(), language);
        String linkWiki = linkWikiEN;
        switch (language) {
            case ("FR"): linkWiki = linkWikiFR;
        }
        logger.debug(linkWiki + wordToAnalyse);

        Document doc = HtmlParsing.getFromUrl(linkWiki + wordToAnalyse);
        if (doc != null) {
            Elements results;
            Element result;

            switch (language) {
                case ("FR"):
                    results = doc.select(".titredef");
                    if (results.equals(null) || results.size() == 0 || results.first().equals(null)) {
                        return word;
                    } else {
                        word.setWordform(results.first().text());
                        return word;
                    }
                case ("EN"):
                    results = doc.getElementsByClass("mw-headline");
                    int i = 0;
                    if (results.equals(null) || results.size() == 0 || results.first().equals(null)) {
                        return word;
                    } else {
                        boolean isWordformCheck1 = false;
                        boolean isWordformCheck2 = true;
                        while (i < results.size()) {
                            result = results.get(i);
                            String wordForm = result.text();
                            if (wordForm.equals("Pronunciation") || wordForm.equals("Alternative forms")) {
                                isWordformCheck2 = false;
                            }
                            if (isWordformCheck1 & isWordformCheck2) {
                                word.setWordform(wordForm);
                                return word;
                            }
                            if (wordForm.startsWith("Etymology")) {
                                isWordformCheck1 = true;
                            }
                            isWordformCheck2 = true;
                            i++;
                        }
                    }
                    break;
            }
        }
        return word;

    }


}
*/